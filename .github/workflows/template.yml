name: CI-template

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      docker_arguments:
        required: false
        type: string
    secrets:
      aws-access-key-id:
        description: "access key id for ecr"
        required: true
      aws-secret-access-key:
        description: "secret access key for ecr"
        required: true

jobs:
  docker-build:
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Read secrets of user and pass from AWS Secrets Manager and convert values in settings.xml
        if: ${{ inputs.service_name != 'data-agent' && inputs.service_name != 'prisma' && inputs.service_name != 'backoffice' && inputs.service_name != 'trading_webserver' && inputs.service_name != 'trading_nextjs' }} 
        run: |
          mvn_username=$(aws secretsmanager get-secret-value --secret-id mvn_username --region us-east-1 --query SecretString --output text | jq -r '.MVN_USERNAME')
          echo "mvnuser: $mvn_username"
          mvn_password=$(aws secretsmanager get-secret-value --secret-id mvn_password --region us-east-1 --query SecretString --output text | jq -r '.MVN_PASSWORD')
          echo "mvnpass: $mvn_password"
          sed -i 's/MVN_USERNAME/'$mvn_username'/' .github/workflows/settings.xml
          sed -i 's/MVN_PASSWORD/'$mvn_password'/' .github/workflows/settings.xml
      - name: Cat Settings.xml file
        if: ${{ inputs.service_name != 'data-agent' && inputs.service_name != 'prisma' && inputs.service_name != 'backoffice' && inputs.service_name != 'trading_webserver' && inputs.service_name != 'trading_nextjs' }}
        run: cat .github/workflows/settings.xml
      - name: Converting upper case to lower case
        id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ inputs.service_name }}
      - name: printing repository name
        run: echo ${{ steps.string.outputs.lowercase }}
      - name: Check if repo exist
        run: |
          repo_name=$(echo ${{ steps.string.outputs.lowercase }})
          echo $repo_name
          aws ecr describe-repositories --repository-names $repo_name || aws ecr create-repository --repository-name $repo_name
      - name: get services hash
        id: service-hashes
        run: |
          service=$(echo ${{ inputs.service_name }})
          if [[ $service != 'data-agent' && $service != 'backoffice' && $service != 'trading_webserver' && $service != 'trading_nextjs' ]]
          then
            hashPath=$GITHUB_WORKSPACE/${{ inputs.service_name }}
            echo "hash path: $hashPath"
            hash="$(find ${hashPath} -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | cut -d " " -f 1)"
            echo "hash of alerting (if) is: $hash"
            echo "::set-output name=image_hash::$hash"             
          else
             hashPath=$GITHUB_WORKSPACE
             echo "hash path: $hashPath"
             hash="$(find ${hashPath} -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | cut -d " " -f 1)"
             echo "hash of service (else) is: $hash"
             echo "::set-output name=image_hash::$hash"  
           fi
      - name: set branch-name
        run: echo "BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed "s/[^a-zA-Z0-9]/-/g")" >> $GITHUB_ENV
      - name: Check if image hash tag is already exist in ECR image repository
        id: hash-tag-exist
        run: |
          set +e
          cmd="$(aws ecr describe-images --repository-name=${{ steps.string.outputs.lowercase }} --image-ids=imageTag=${{ steps.service-hashes.outputs.image_hash }})"
          if [[ ! -z "$cmd" ]]
          then
            echo "tag already exist"
            echo "::set-output name=tag_exist::true"
          else
             echo "tag doesn't exist"
             echo "::set-output name=tag_exist::false"
           fi
      - name: Read secrets for args docker file
        id: docker-args
        if: ${{ inputs.service_name == 'backoffice' || inputs.service_name == 'trading_webserver' || inputs.service_name == 'trading_nextjs'}} 
        run: |
          args=$(aws secretsmanager get-secret-value --secret-id PACKAGES_REPO_TOKEN --region us-east-1 --query SecretString --output text | jq -r '.PACKAGES_REPO_TOKEN')
          echo "args: $args"
          echo "::set-output name=args::$args"  
      - name: Build, tag, and push image to Amazon ECR
        if: ${{ steps.hash-tag-exist.outputs.tag_exist == 'false' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG_LIST: "${{github.run_number}},${{ github.sha }},${{ env.BRANCH_NAME }}"
          IMAGE_TAG: ${{ steps.service-hashes.outputs.image_hash }}
        run: |
          repo_name=$(echo ${{ steps.string.outputs.lowercase }})
          Docker_image=$ECR_REGISTRY/$repo_name:$IMAGE_TAG
          echo "Docker_image: $Docker_image"
          docker_folder=$(echo ${{ inputs.service_name }})
          echo "Service: $docker_folder"
          arguments=$(echo ${{ inputs.docker_arguments }})
          echo "Arguments: $arguments"
          if [[ ! -z $arguments ]]
          then
            echo "there are arguments"
            arguments=${{ steps.docker-args.outputs.args }}
            echo "Arguments: $arguments"
            if [[ $docker_folder == 'trading_nextjs' ]]
            then
              command="docker build -t $Docker_image -f Dockerfile --build-arg PACKAGES_REPO_TOKEN=$arguments --build-arg BACKEND_SERVICE_URL=trading-webserver.cypator-services.svc.cluster.local . "
            else
               command="docker build -t $Docker_image -f Dockerfile --build-arg PACKAGES_REPO_TOKEN=$arguments . "
            fi
          else
             echo "there are no arguments in docker file"
             if [[ $docker_folder == 'data-agent' ]]
             then
               command="docker build -f Dockerfile . -t $Docker_image --progress=plain"
             else
                command="docker build -f $docker_folder/Dockerfile . -t $Docker_image --progress=plain"
             fi
           fi
          echo "$command"
          $command
          docker push $Docker_image
      - name: Retag
        env:
          HASH_TAG_EXIST: ${{ steps.hash-tag-exist.outputs.tag_exist }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG_LIST_SHORT: "${{ env.BRANCH_NAME }}"
          TAG_LIST_FULL: "${{ env.BRANCH_NAME }},${{github.run_number}}"
          ECR_REPOSITORY: "${{ steps.string.outputs.lowercase }}"
        run: |
          if [[ "$HASH_TAG_EXIST" == 'true' ]]
          then
            echo "tag already exist"
            export TAG_LIST=$TAG_LIST_SHORT
          else
            echo "tag doesn't exist"
            export TAG_LIST=$TAG_LIST_FULL
          fi
          echo $TAG_LIST
          export MANIFEST=$(aws ecr batch-get-image --repository-name ${{ steps.string.outputs.lowercase }} --image-ids imageTag=${{ steps.service-hashes.outputs.image_hash }} --output json | jq --raw-output --join-output '.images[0].imageManifest')
          echo "MANIFEST: $MANIFEST"
          # chmod +x "${GITHUB_WORKSPACE}/.github/workflows/scripts/ecr_retag.sh"
          sh .github/workflows/scripts/ecr_retag.sh

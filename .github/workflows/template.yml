name: CI-template

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      docker_arguments:
        required: false
        type: string
    secrets:
      aws-access-key-id:
        description: "access key id for ecr"
        required: true
      aws-secret-access-key:
        description: "secret access key for ecr"
        required: true

jobs:
  docker-build:
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Read secrets from AWS Secrets Manager and convert values in settings.xml
        if: ${{ inputs.service_name != 'data-agent'}}
        run: |
          mvn_username=$(aws secretsmanager get-secret-value --secret-id mvn_username --region us-east-1 --query SecretString --output text | jq -r '.MVN_USERNAME')
          echo "mvnuser: $mvn_username"
          mvn_password=$(aws secretsmanager get-secret-value --secret-id mvn_password --region us-east-1 --query SecretString --output text | jq -r '.MVN_PASSWORD')
          echo "mvnpass: $mvn_password"
          sed -i 's/MVN_USERNAME/'$mvn_username'/' .github/workflows/settings.xml
          sed -i 's/MVN_PASSWORD/'$mvn_password'/' .github/workflows/settings.xml
      - name: Cat Settings.xml file
        if: ${{ inputs.service_name != 'data-agent'}}
        run: cat .github/workflows/settings.xml
      - name: Converting upper case to lower case
        id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ inputs.service_name }}
      - name: printing repository name
        run: echo ${{ steps.string.outputs.lowercase }}
      - name: Check if repo exist
        run: |
          repo_name=$(echo ${{ steps.string.outputs.lowercase }})
          echo $repo_name
          aws ecr describe-repositories --repository-names $repo_name || aws ecr create-repository --repository-name $repo_name
      - name: printing build id
        run: echo ${{github.run_number}}
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{github.run_number}}
        run: |
          repo_name=$(echo ${{ steps.string.outputs.lowercase }})
          Docker_image=$ECR_REGISTRY/$repo_name:$IMAGE_TAG
          echo "Docker_image: $Docker_image"
          docker_folder=$(echo ${{ inputs.service_name }})
          echo "Service: $docker_folder"
          arguments=$(echo ${{ inputs.docker_arguments }})
          echo "Arguments: $arguments"
          if [[ ! -z $arguments ]]
          then
            echo "there are arguments"
            arguments=$(echo ${{ inputs.docker_arguments }})
            echo "Arguments: $arguments"
            command="docker build -t $Docker_image -f $docker_folder/Dockerfile --build-arg $arguments . "
          else
             echo "GITHUB_WORKSPACE1: $GITHUB_WORKSPACE"
             echo "there are no arguments in docker file"
             if [[ $docker_folder == 'data-agent' ]]
             then
               command="docker build -f Dockerfile . -t $Docker_image --progress=plain"
             else
                echo "GITHUB_WORKSPACE2: $GITHUB_WORKSPACE"
                command="docker build -f $docker_folder/Dockerfile . -t $Docker_image --progress=plain"
           fi
          echo "$command"
          $command
          docker push $Docker_image
